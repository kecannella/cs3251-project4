
<!-- saved from url=(0086)file:///C:/Users/Katherine/Dropbox/current-classes/cs-3251/project-04/instructions.htm -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Project 4</title>
   <style>[touch-action="none"]{ -ms-touch-action: none; touch-action: none; }[touch-action="pan-x"]{ -ms-touch-action: pan-x; touch-action: pan-x; }[touch-action="pan-y"]{ -ms-touch-action: pan-y; touch-action: pan-y; }[touch-action="scroll"],[touch-action="pan-x pan-y"],[touch-action="pan-y pan-x"]{ -ms-touch-action: pan-x pan-y; touch-action: pan-x pan-y; }</style></head>
  <body>
    <h1>Project 4</h1>

    <h2>Goal</h2>
    <p>
    The goal of Project 4 is for students to build <i>GTmyMusic</i>,
    a file/music synchronization application for the Android mobile 
    operating system. Students will build a client and modify their 
    server from Project 2, enabling an expanded range of functionality.
    </p>

    <h2>Description</h2>
    <p>
    <b>Due:</b> Tuesday, November 26th, 5pm EST<br>
    <b>Points:</b> 80<br>
    <b>Teams:</b> You <i>must</i> work as a pair. Students should note that both 
    members receive the same grade. You MAY work with your previous partner, or
    can change partners if necessary. <font color="red">Students not working as a group will 
    automatically lose 30 points.</font>
    </p>

    <p>
    Both you and Professor Traynor were excited on the completion of Project 2.
    Unfortunately, while we can now synchronize our music compilations across
    our many machines, we still can not get our music to the device we actually
    use to listen to it - our mobile phones. Students will solve this problem and 
    extend GTmyMusic, which will now have a mobile client that runs as an
    application on the Android platform. The new version of GTmyMusic will 
    implement all the same functions as in Project 2, and also some new
    functionality.
    </p>

    <p> 
    Mobile clients can send one of <b>5</b> messages to the server: 1) List 
    Files (ask the server to return a list of files it currently has); 2) Diff 
    (based on 1)), the client should show a "diff" of the files it has in comparison 
    to the server); 3) Pull (request all files identified in 2)) from the server
    and store them locally); 4) Leave (the client should end its session with 
    the server and take care of any open connections) and 5) Cap (mobile devices 
    often have limited data plans. This command tells the server the maximum total 
    size of files that can be received, and the server picks the most popular music 
    files that can be completely sent without exceeding the bandwidth cap). The server 
    must be multithreaded to handle multiple concurrent client requests (reads and
    writes) and store/retrieve historical information about each client in a
    file.  
    </p>

    <p>
    In particular, the following functions will need to be implemented:
    </p>
    <ul>
	<li><tt>LIST</tt> 
	</li><li><tt>DIFF</tt> 
	</li><li><tt>PULL</tt> 
	</li><li><tt>CAP</tt>
	</li><li><tt>LEAVE</tt> 
    </li></ul>

    <p>
    For the <tt>CAP</tt> command, students should determine popularity by scanning
    the .xml file generated by their iTunes library (usually named "iTunes Music 
    Library.xml"). This file and the associated scanning will happen on the server 
    side. Students should parse the file and look for the "Play Count".
    </p>

    <p>
    Like Project 2, no skeleton files will be provided. However, I will instead 
    provide design goals which must be met along the path towards implementing 
    this project. They are:
    </p>

    <ol>
	<li> Students must develop an overview of the architecture they plan
	to build that will achieve all of the above tasks. This should be
	a written document, saved as a PDF. (10%)
	</li><li> Given the above message types, students must define one or more
	structs capable of carrying this information. (10%)
	</li><li> Students must develop an Android client capable of implementing
	the original four commands from Project 2. (50%)
	</li><li> Students must extend their Project 2 server and the Android client
	to implement the <tt>CAP</tt> command. (30%)
    </li></ol>

    <h2>Submission Instructions</h2>
    <p>
    Students are to turn in all their files as a single tarfile, to
    the TA via T-Square. The tarfile should be your named as follows: 
    last_last-proj4.tar.gz. 
    </p>

    <p>
    Students will need to demo their project to the TA. Demos will be
    scheduled after the assignment is turned in. Both students must turn
    in a copy of the project to T-Square (they must match) and must both
    be present at the demo. <b>Projects that are not demoed will recieve no
    credit.</b>
    </p>

  


</body></html>